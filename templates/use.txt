from flask import Flask, render_template, request, redirect, url_for
import psycopg2
import random
from flask_mail import Mail, Message

app = Flask(__name__)

@app.route("/")
def home_page():
    return render_template('index.html')

@app.route('/signup', methods=["POST", "GET"])
def signup():
    error_message = None
    show_otp_modal = False

    if request.method == 'POST':
        first_name = request.form.get('fname')
        last_name = request.form.get('lname')
        user_name = request.form.get('uname')
        email_address = request.form.get('emailid')
        password = request.form.get('pass')
        conf_password = request.form.get('confpass')

        # Check if the username already exists
        conn = psycopg2.connect(
            dbname='signup',
            user='postgres',
            password='Anuj@2000',
            host='localhost',
            port='5432'
        )
        cur = conn.cursor()

        username_exists_query = "SELECT * FROM details WHERE user_name = %s"
        cur.execute(username_exists_query, (user_name,))
        existing_username = cur.fetchone()

        email_exists_query = "SELECT * FROM details WHERE email = %s"
        cur.execute(email_exists_query, (email_address,))
        existing_email = cur.fetchone()

        cur.close()
        conn.close()

        if existing_username:
            error_message = "This username is already taken. Please try a different one."
        elif existing_email:
            error_message = "This email address is already registered. Please try to login or use a different email."

        # Check if password and confirm password match
        elif password != conf_password:
            error_message = "Passwords do not match. Please correct your password."
        else:
            try:
                show_otp_modal = True

                conn = psycopg2.connect(
                    dbname='signup',
                    user='postgres',
                    password='Anuj@2000',
                    host='localhost',
                    port='5432'
                )
                cur = conn.cursor()

                insert_query = """INSERT INTO details(first_name, last_name, user_name, passwd, email) VALUES (%s, %s, %s, %s, %s)"""
                cur.execute(insert_query, (first_name, last_name, user_name, password, email_address))
                conn.commit()
                cur.close()
                conn.close()

                # If successful, redirect to the login page
                # return redirect(url_for('login'))

            except Exception as e:
                error_message = f"An error occurred: {str(e)}"

    return render_template("signup.html", error_message=error_message,show_otp_modal=show_otp_modal)

@app.route('/login')
def login():
    return render_template('login.html')

if __name__ == "__main__":
    app.run(debug=True)


from google.cloud import secretmanager

# Create the Secret Manager client.
client = secretmanager.SecretManagerServiceClient()

# Access the secret version.
response = client.access_secret_version(request={"name": "projects/878639619272/secrets/emailer-password/versions/latest"})

# Print the value of the secret.
print(response.payload.data.decode("UTF-8"))